{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"navigation\", \"screenProps\", \"persistNavigationState\", \"loadNavigationState\", \"theme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from \"./utils/invariant\";\nimport docsUrl from \"./utils/docsUrl\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar urlToPathAndParams = pathUtils.urlToPathAndParams;\nfunction isStateful(props) {\n  return !props.navigation;\n}\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  var navigation = props.navigation,\n    screenProps = props.screenProps,\n    persistNavigationState = props.persistNavigationState,\n    loadNavigationState = props.loadNavigationState,\n    theme = props.theme,\n    containerProps = _objectWithoutProperties(props, _excluded);\n  var keys = Object.keys(containerProps);\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\nvar _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\nvar _reactNavigationIsHydratingState = false;\nexport default function createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    _inherits(NavigationContainer, _React$Component);\n    var _super = _createSuper(NavigationContainer);\n    function NavigationContainer(props) {\n      var _this;\n      _classCallCheck(this, NavigationContainer);\n      _this = _super.call(this, props);\n      _this.subs = null;\n      _this._actionEventSubscribers = new Set();\n      _this._handleOpenURL = function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n          enableURLHandling = _this$props.enableURLHandling,\n          uriPrefix = _this$props.uriPrefix;\n        if (enableURLHandling === false) {\n          return;\n        }\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n            params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      };\n      _this._persistNavigationState = function () {\n        var _ref2 = _asyncToGenerator(function* (nav) {\n          var persistNavigationState = _this.props.persistNavigationState;\n          if (persistNavigationState) {\n            try {\n              yield persistNavigationState(nav);\n            } catch (err) {\n              console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n            }\n          }\n        });\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      _this.dispatch = function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n            dispatchActionEvents();\n            _this._persistNavigationState(navState);\n          });\n          return true;\n        }\n        dispatchActionEvents();\n        return false;\n      };\n      _this._getScreenProps = function () {\n        return _this.props.screenProps;\n      };\n      _this._getTheme = function () {\n        if (_this.props.theme === 'light' || _this.props.theme === 'dark') {\n          return _this.props.theme;\n        } else if (_this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \" + _this.props.theme + \". Only 'light' and 'dark' are supported. Falling back to 'light'\");\n          return 'light';\n        }\n      };\n      validateProps(props);\n      _this._initialAction = NavigationActions.init();\n      if (_this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        _this.subs = BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n      _this.state = {\n        nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n    _createClass(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n          return;\n        }\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function () {\n        var _componentDidMount = _asyncToGenerator(function* () {\n          var _this2 = this;\n          this._isMounted = true;\n          if (!this._isStateful()) {\n            return;\n          }\n          if (__DEV__ && !this.props.detached) {\n            if (_statefulContainerCount > 0) {\n              if (Platform.OS === 'ios') {\n                console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \" + docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator'));\n              }\n            }\n          }\n          _statefulContainerCount++;\n          Linking.addEventListener('url', this._handleOpenURL);\n          var parsedUrl = null;\n          var userProvidedStartupState = null;\n          if (this.props.enableURLHandling !== false) {\n            var _yield$this$getStartu = yield this.getStartupParams();\n            parsedUrl = _yield$this$getStartu.parsedUrl;\n            userProvidedStartupState = _yield$this$getStartu.userProvidedStartupState;\n          }\n          var action = this._initialAction;\n          var startupState = this.state.nav;\n          if (!startupState && !userProvidedStartupState) {\n            !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n            startupState = Component.router.getStateForAction(action);\n          }\n          if (userProvidedStartupState) {\n            startupState = userProvidedStartupState;\n            _reactNavigationIsHydratingState = true;\n          }\n          if (parsedUrl) {\n            var _parsedUrl = parsedUrl,\n              path = _parsedUrl.path,\n              params = _parsedUrl.params;\n            var urlAction = Component.router.getActionForPathAndParams(path, params);\n            if (urlAction) {\n              !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n              action = urlAction;\n              startupState = Component.router.getStateForAction(urlAction, startupState);\n            }\n          }\n          var dispatchActions = function dispatchActions() {\n            return _this2._actionEventSubscribers.forEach(function (subscriber) {\n              return subscriber({\n                type: 'action',\n                action: action,\n                state: _this2.state.nav,\n                lastState: null\n              });\n            });\n          };\n          if (startupState === this.state.nav) {\n            dispatchActions();\n            return;\n          }\n          this.setState({\n            nav: startupState\n          }, function () {\n            _reactNavigationIsHydratingState = false;\n            dispatchActions();\n          });\n        });\n        function componentDidMount() {\n          return _componentDidMount.apply(this, arguments);\n        }\n        return componentDidMount;\n      }()\n    }, {\n      key: \"getStartupParams\",\n      value: function () {\n        var _getStartupParams = _asyncToGenerator(function* () {\n          var _this$props2 = this.props,\n            uriPrefix = _this$props2.uriPrefix,\n            loadNavigationState = _this$props2.loadNavigationState;\n          var url, loadedNavState;\n          try {\n            var _yield$Promise$all = yield Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n            var _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            url = _yield$Promise$all2[0];\n            loadedNavState = _yield$Promise$all2[1];\n          } catch (err) {}\n          return {\n            parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n            userProvidedStartupState: loadedNavState\n          };\n        });\n        function getStartupParams() {\n          return _getStartupParams.apply(this, arguments);\n        }\n        return getStartupParams;\n      }()\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n          this.dispatch(NavigationActions.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._isMounted = false;\n        Linking.removeEventListener('url', this._handleOpenURL);\n        this.subs && this.subs.remove();\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n        var navigation = this.props.navigation;\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n          if (!navState) {\n            return this._renderLoading();\n          }\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n          navigation = this._navigation;\n        }\n        invariant(navigation, 'failed to get navigation');\n        return _jsx(ThemeProvider, {\n          value: this._getTheme(),\n          children: _jsx(NavigationProvider, {\n            value: navigation,\n            children: _jsx(Component, _objectSpread(_objectSpread({}, this.props), {}, {\n              navigation: navigation\n            }))\n          })\n        });\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n    return NavigationContainer;\n  }(React.Component);\n  NavigationContainer.router = Component.router;\n  NavigationContainer.navigationOptions = null;\n  NavigationContainer.defaultProps = {\n    theme: 'light'\n  };\n  return NavigationContainer;\n}","map":{"version":3,"names":["React","Linking","Platform","BackHandler","NavigationActions","ThemeProvider","pathUtils","getNavigation","NavigationProvider","invariant","docsUrl","jsx","_jsx","urlToPathAndParams","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","_objectWithoutProperties","_excluded","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","subs","_actionEventSubscribers","Set","_handleOpenURL","_ref","url","_this$props","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","_persistNavigationState","_ref2","_asyncToGenerator","nav","err","_x","apply","arguments","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_getScreenProps","_getTheme","_initialAction","init","_isStateful","addEventListener","_isMounted","remove","back","_createClass","key","value","_renderLoading","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","componentDidUpdate","_componentDidMount","_this2","__DEV__","detached","OS","userProvidedStartupState","_yield$this$getStartu","getStartupParams","startupState","_parsedUrl","urlAction","dispatchActions","componentDidMount","_getStartupParams","_this$props2","loadedNavState","_yield$Promise$all","Promise","all","getInitialURL","_yield$Promise$all2","_slicedToArray","componentDidCatch","e","componentWillUnmount","removeEventListener","render","_this3","_navigation","children","_objectSpread","getDerivedStateFromProps","nextProps","navigationOptions","defaultProps"],"sources":["/Users/macbook/Projects/FrontEnd/FrontEnd/node_modules/@react-navigation/native/dist/createAppContainer.js"],"sourcesContent":["import React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + `unclear if it should own its own state. Remove props: \"${keys.join(', ')}\" ` + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light'\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (__DEV__ && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(`You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')}`);\n          }\n        }\n      }\n      _statefulContainerCount++;\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(path, params);\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(urlAction, startupState);\n        }\n      }\n\n      const dispatchActions = () => this._actionEventSubscribers.forEach(subscriber => subscriber({\n        type: 'action',\n        action,\n        state: this.state.nav,\n        lastState: null\n      }));\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async nav => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(action, lastNavState);\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber => subscriber({\n          type: 'action',\n          action,\n          state: navState,\n          lastState: lastNavState\n        }));\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(`Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`);\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>;\n    }\n  }\n\n  return NavigationContainer;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}